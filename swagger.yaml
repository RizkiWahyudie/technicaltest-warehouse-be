openapi: 3.0.0
info:
  title: Warehouse Management API
  version: 1.0.0
  description: API Documentation for Warehouse Management System
  contact:
    name: API Support
    email: support@warehouse.com

servers:
  - url: http://localhost:5050/api
    description: Development server
  - url: https://api.warehouse.com/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Products
    description: Product management operations

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: admin@warehouse.com
                password:
                  type: string
                  example: password123
              required: [email, password]
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: admin@warehouse.com
                      role:
                        type: string
                        example: Admin
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      tags: [Products]
      summary: Get all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  
    post:
      tags: [Products]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /products/{code}:
    get:
      tags: [Products]
      summary: Get product by code
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          example: PRD001
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Products]
      summary: Update product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          example: PRD001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Products]
      summary: Delete product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          example: PRD001
      responses:
        '204':
          description: Product deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required: [code, name, unit_of_measurement, category]
      properties:
        code:
          type: string
          example: PRD001
          description: Unique product code
        name:
          type: string
          example: Laptop
          description: Product name
        description:
          type: string
          example: High performance laptop
          description: Product description
        weight:
          type: number
          format: float
          example: 1.5
          description: Product weight
        unit_of_measurement:
          type: string
          example: kg
          description: Unit of measurement
        category:
          type: string
          example: Electronics
          description: Product category
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        status:
          type: integer
          example: 404
        message:
          type: string
          example: Product not found
        errors:
          type: array
          items:
            type: string
          example: ["Code is required", "Name must be at least 3 characters"]

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'